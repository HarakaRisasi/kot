<!--Неправильная практика заключается в том, чтобы жестко закодировать строки в файлы / код макета. -->
<!--    Вы должны добавить их в строковый файл ресурсов, а затем ссылаться на них из своего макета.-->

<!--    Причины:-->
<!--    Это позволяет одновременно обновлять каждое вхождение одного и того же слова во всех макетах, -->
<!--    просто редактируя файл strings.xml. Это также чрезвычайно полезно для поддержки нескольких языков, -->
<!--    так как отдельный файл strings.xml может использоваться для каждого поддерживаемого языка.-->
<!--    Как говорится в документации :-->
<!--    Предположим, что языком вашего приложения по умолчанию является английский. -->
<!--    Предположим также, что вы хотите локализовать весь текст в своем приложении на французский язык, -->
<!--    а большую часть текста в приложении (все, кроме названия приложения), на японский. В этом случае-->
<!--    вы можете создать три альтернативных файла strings.xml, -->
<!--    каждый из которых хранится в локальном каталоге ресурсов-->

<!--    Я думаю, что этих причин достаточно, чтобы рекомендовать для @String-->
<!--    Таким образом, у вас есть фиксированное место, чтобы изменить все ваши строки в проекте. -->
<!--    Допустим, вы использовали ту же строку в 10 разных местах кода. -->
<!--    Что делать, если вы решите изменить его? Вместо того, чтобы искать, -->
<!--    где все это было использовано в проекте, вы просто меняете его один раз, -->
<!--    и изменения отражаются везде в проекте.-->
<resources>
    <string name="app_name">HappyBirthday</string>
    <string name="textview">TextView</string>
    <string name="happy_birthday_text">Happy Birthday</string>
    <string name="happy_birthday_aurora">Happy Birthday, Aurora</string>
    <string name="from_your_parents">From Your Parents</string>
</resources>